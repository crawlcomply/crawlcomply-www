/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Token controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpHeaders, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { GrantType, RequestOptions, Token } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";

@Injectable({ providedIn: "root" })
export class TokenService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    token(grant_type: GrantType, client_id?: string | null, client_secret?: string | null, code?: string | null, password?: string | null, redirect_uri?: string | null, refresh_token?: string | null, username?: string | null, observe?: 'body', options?: RequestOptions<'json'>): Observable<Token>;
    token(grant_type: GrantType, client_id?: string | null, client_secret?: string | null, code?: string | null, password?: string | null, redirect_uri?: string | null, refresh_token?: string | null, username?: string | null, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Token>>;
    token(grant_type: GrantType, client_id?: string | null, client_secret?: string | null, code?: string | null, password?: string | null, redirect_uri?: string | null, refresh_token?: string | null, username?: string | null, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Token>>;
    token(grant_type: GrantType, client_id?: string | null, client_secret?: string | null, code?: string | null, password?: string | null, redirect_uri?: string | null, refresh_token?: string | null, username?: string | null, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/api/token`;

        let headers: HttpHeaders;
        if (options?.headers instanceof HttpHeaders) {
            headers = options.headers;
        } else {
            headers = new HttpHeaders(options?.headers);
        }
        // Set Content-Type for URL-encoded form data
        if (!headers.has('Content-Type')) {
            headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');
        }

        const formBody = new URLSearchParams();
        if (client_id !== undefined && client_id !== null) {
            formBody.append('client_id', String(client_id));
        }
        if (client_secret !== undefined && client_secret !== null) {
            formBody.append('client_secret', String(client_secret));
        }
        if (code !== undefined && code !== null) {
            formBody.append('code', String(code));
        }
        if (grant_type !== undefined && grant_type !== null) {
            formBody.append('grant_type', String(grant_type));
        }
        if (password !== undefined && password !== null) {
            formBody.append('password', String(password));
        }
        if (redirect_uri !== undefined && redirect_uri !== null) {
            formBody.append('redirect_uri', String(redirect_uri));
        }
        if (refresh_token !== undefined && refresh_token !== null) {
            formBody.append('refresh_token', String(refresh_token));
        }
        if (username !== undefined && username !== null) {
            formBody.append('username', String(username));
        }

        const requestOptions: any = {
            observe: observe as any,
            headers,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, formBody.toString(), requestOptions);
    }
}
