/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated TypeScript interfaces from Swagger specification
* Do not edit this file manually
*/
import { HttpContext, HttpHeaders } from "@angular/common/http";
export interface AuthErrorSchema {
    error: string;
    error_message: string;
}

/** Create Struct for a row in table `org` for [`Org`] */
export interface CreateOrg {
    /** Field representing column `avatar_url` */
    avatar_url?: string | null;
    /** Field representing column `description` */
    description?: string | null;
    /** Field representing column `github_id` */
    github_id?: string | null;
    /** Field representing column `name` */
    name: string;
    /** Field representing column `owner` */
    owner: string;
}

/** Create Struct for a row in table `profile` for [`Profile`] */
export interface CreateProfile {
    /** Field representing column `alias` */
    alias: string;
    /** Field representing column `avatar_url` */
    avatar_url?: string | null;
    /** Field representing column `description` */
    description?: string | null;
    /** Field representing column `github_id` */
    github_id?: string | null;
    /** Field representing column `username` */
    username: string;
}

/** Create Struct for a row in table `repo` for [`Repo`] */
export interface CreateRepo {
    /** Field representing column `comments_url` */
    comments_url?: string | null;
    /** Field representing column `default_branch` */
    default_branch?: string | null;
    /** Field representing column `description` */
    description?: string | null;
    /** Field representing column `fork` */
    fork?: boolean | null;
    /** Field representing column `full_name` */
    full_name?: string | null;
    /** Field representing column `html_url` */
    html_url?: string | null;
    /** Field representing column `id` */
    id: number;
    /** Field representing column `is_monorepo` */
    is_monorepo?: boolean | null;
    /** Field representing column `languages` */
    languages?: any[] | null;
    /** Field representing column `last_commit` */
    last_commit?: string | null;
    /** Field representing column `name` */
    name: string;
    /** Field representing column `node_id` */
    node_id?: string | null;
    /** Field representing column `org` */
    org: string;
    /** Field representing column `private` */
    private?: boolean | null;
    /** Field representing column `pulls_url` */
    pulls_url?: string | null;
    /** Field representing column `spdx` */
    spdx?: string | null;
    /** Field representing column `visibility` */
    visibility?: string | null;
}

/** Create Struct for a row in table `repo_history` for [`RepoHistory`] */
export interface CreateRepoHistory {
    /** Field representing column `commit` */
    commit: string;
    doc_coverage?: null | String;
    /** Field representing column `full_name` */
    full_name: string;
    /** Field representing column `git_branch` */
    git_branch?: string | null;
    /** Field representing column `git_tag` */
    git_tag?: string | null;
    /** Field representing column `github_pr` */
    github_pr?: number | null;
    /** Field representing column `hosted_docs_url` */
    hosted_docs_url?: string | null;
    /** Field representing column `id` */
    id?: string | null;
    /** Field representing column `metrics` */
    metrics?: any;
    /** Field representing column `notes` */
    notes?: string | null;
    /** Field representing column `repo_id` */
    repo_id?: number | null;
    /** Field representing column `security_scanner` */
    security_scanner?: string | null;
    test_coverage?: null | String;
}

/** Create Struct for a row in table `run_history` for [`RunHistory`] */
export interface CreateRunHistory {
    /** Field representing column `commit` */
    commit: string;
    /** Field representing column `full_name` */
    full_name: string;
    /** Field representing column `id` */
    id?: string | null;
    /** Field representing column `status` */
    status?: string | null;
}

export enum GrantType {
    Password = "password",
    AuthorizationCode = "authorization_code",
    ClientCredentials = "client_credentials",
    RefreshToken = "refresh_token"
}

/** Struct representing a row in table `org` */
export interface Org {
    /** Field representing column `avatar_url` */
    avatar_url?: string | null;
    /** Field representing column `created_at` */
    created_at: Date;
    /** Field representing column `description` */
    description?: string | null;
    /** Field representing column `github_id` */
    github_id?: string | null;
    /** Field representing column `name` */
    name: string;
    /** Field representing column `owner` */
    owner: string;
}

export interface OrgVecObj {
    orgs: Org[];
}

/** Struct representing a row in table `profile` */
export interface Profile {
    /** Field representing column `alias` */
    alias: string;
    /** Field representing column `avatar_url` */
    avatar_url?: string | null;
    /** Field representing column `created_at` */
    created_at: Date;
    /** Field representing column `description` */
    description?: string | null;
    /** Field representing column `github_id` */
    github_id?: string | null;
    /** Field representing column `username` */
    username: string;
}

export interface ProfileVecObj {
    profiles: Profile[];
}

/** Struct representing a row in table `repo` */
export interface Repo {
    /** Field representing column `comments_url` */
    comments_url?: string | null;
    /** Field representing column `created_at` */
    created_at: Date;
    /** Field representing column `default_branch` */
    default_branch?: string | null;
    /** Field representing column `description` */
    description?: string | null;
    /** Field representing column `fork` */
    fork?: boolean | null;
    /** Field representing column `full_name` */
    full_name?: string | null;
    /** Field representing column `html_url` */
    html_url?: string | null;
    /** Field representing column `id` */
    id: number;
    /** Field representing column `is_monorepo` */
    is_monorepo?: boolean | null;
    /** Field representing column `languages` */
    languages?: any[] | null;
    /** Field representing column `last_commit` */
    last_commit?: string | null;
    /** Field representing column `name` */
    name: string;
    /** Field representing column `node_id` */
    node_id?: string | null;
    /** Field representing column `org` */
    org: string;
    /** Field representing column `private` */
    private?: boolean | null;
    /** Field representing column `pulls_url` */
    pulls_url?: string | null;
    /** Field representing column `spdx` */
    spdx?: string | null;
    /** Field representing column `updated_at` */
    updated_at: Date;
    /** Field representing column `visibility` */
    visibility?: string | null;
}

/** Struct representing a row in table `repo_history` */
export interface RepoHistory {
    /** Field representing column `commit` */
    commit: string;
    /** Field representing column `created_at` */
    created_at: Date;
    doc_coverage?: null | String;
    /** Field representing column `full_name` */
    full_name: string;
    /** Field representing column `git_branch` */
    git_branch?: string | null;
    /** Field representing column `git_tag` */
    git_tag?: string | null;
    /** Field representing column `github_pr` */
    github_pr?: number | null;
    /** Field representing column `hosted_docs_url` */
    hosted_docs_url?: string | null;
    /** Field representing column `id` */
    id?: string | null;
    /** Field representing column `metrics` */
    metrics?: any;
    /** Field representing column `notes` */
    notes?: string | null;
    /** Field representing column `repo_id` */
    repo_id?: number | null;
    /** Field representing column `security_scanner` */
    security_scanner?: string | null;
    test_coverage?: null | String;
}

export interface RepoHistoryVecObj {
    repo_histories: RepoHistory[];
}

export interface RepoVecObj {
    repos: Repo[];
}

/** Struct representing a row in table `run_history` */
export interface RunHistory {
    /** Field representing column `commit` */
    commit: string;
    /** Field representing column `created_at` */
    created_at: Date;
    /** Field representing column `full_name` */
    full_name: string;
    /** Field representing column `id` */
    id?: string | null;
    /** Field representing column `run` */
    run: number;
    /** Field representing column `status` */
    status?: string | null;
}

export interface RunHistoryVecObj {
    runs: RunHistory[];
}

export interface SecretText {
    [key: string]: unknown;
}

export interface String {
    [key: string]: unknown;
}

export interface Token {
    /** access token used for entry into protected endpoints */
    access_token: string;
    /** how long until this token expires (in seconds) */
    expires_in: number;
    /** access token used for entry into protected endpoints */
    refresh_token: string;
    /** token type, e.g., Bearer is provided in the Authorization HTTP header */
    token_type: string;
}

export interface TokenRequest {
    /** optional client ID (required, for example, in RFC6749's non password non refresh grant flow) */
    client_id?: string | null;
    /** optional client secret (as used, e.g., in RFC6749's non (password|refresh) grant flow) */
    client_secret?: string | null;
    /** optional code (required, e.g., in datatracker.ietf.org/doc/html/rfc6749#section-4.1.3) */
    code?: string | null;
    /** RFC6749 grant type */
    grant_type: GrantType;
    /** optional password (as used, for example, in RFC6749's password grant flow) */
    password?: string | null;
    /** optional redirect_uri (used, e.g., in datatracker.ietf.org/doc/html/rfc6749#section-4.1.3) */
    redirect_uri?: string | null;
    /** optional refresh token (as used, for example, in RFC6749's refresh grant flow) */
    refresh_token?: string | null;
    /** optional username (as used, for example, in RFC6749's password grant flow) */
    username?: string | null;
}

/** Version record for this package and its first-party dependencies */
export interface Version {
    /** version of crawlcomply-backend */
    crawlcomply_backend: string;
    /** name of this package */
    name: string;
    /** version of rust-actix-diesel-auth-scaffold */
    radas: string;
    /** version of crawlcomply-serve */
    version: string;
}

/** Request Options for Angular HttpClient requests */
export interface RequestOptions<TResponseType extends 'arraybuffer' | 'blob' | 'json' | 'text'> {
    headers?: HttpHeaders;
    reportProgress?: boolean;
    responseType?: TResponseType;
    withCredentials?: boolean;
    context?: HttpContext;
}
